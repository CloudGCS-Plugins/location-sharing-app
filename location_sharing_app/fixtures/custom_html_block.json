[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"aircraft-locations-map\"></div>",
  "modified": "2025-04-18 15:31:53.932212",
  "name": "Aircraft Locations",
  "private": 0,
  "roles": [],
  "script": "function renderMap(aircrafts) {\r\n  let mapContainer = root_element.querySelector(\"#aircraft-locations-map\");\r\n  if (!mapContainer) {\r\n    console.error(\"Map container not found!\");\r\n    return;\r\n  }\r\n\r\n  // Initialize the map with a center and zoom level\r\n  let map = L.map(mapContainer).setView([0, 0], 2); // Set initial center and zoom\r\n\r\n  let tileLayerSatellite = L.tileLayer(\r\n    \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\r\n    {\r\n      attribution:\r\n        \"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\",\r\n    }\r\n  );\r\n\r\n  let tileLayerTerrain = L.tileLayer(\r\n    \"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\",\r\n    {\r\n      attribution:\r\n        \"Tiles &copy; Esri &mdash; National Geographic, Esri, DeLorme, NAVTEQ, UNEP-WCMC, USGS, NASA, ESA, METI, NRCAN, GEBCO, NOAA, iPC\",\r\n      maxZoom: 16,\r\n    }\r\n  );\r\n\r\n  let tileLayerOSM = L.tileLayer(\r\n    \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\",\r\n    {\r\n      maxZoom: 19,\r\n      attribution:\r\n        '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\r\n    }\r\n  );\r\n\r\n  let baseMaps = {\r\n    Satellite: tileLayerSatellite,\r\n    Terrain: tileLayerTerrain,\r\n    OpenStreetMap: tileLayerOSM,\r\n  };\r\n\r\n  tileLayerSatellite.addTo(map);\r\n  L.control.layers(baseMaps).addTo(map);\r\n\r\n  let markers = L.markerClusterGroup({\r\n    showCoverageOnHover: false,\r\n    iconCreateFunction: function (cluster) {\r\n      return L.divIcon({\r\n        html: `<div class=\"cluster_icon\"></div>`,\r\n        className: \"\",\r\n        iconSize: [40, 40],\r\n      });\r\n    },\r\n  });\r\n\r\n  // Store the current zoom and center before updating markers\r\n  let lastZoom = null;\r\n  let lastCenter = null;\r\n  let firstRender = true; // A flag to check if it's the first render\r\n\r\n  function updateMarkers(aircrafts) {\r\n    // Track the currently open popup\r\n    let openPopup = null;\r\n    map.eachLayer((layer) => {\r\n      if (layer instanceof L.Marker && layer.isPopupOpen()) {\r\n        openPopup = layer.getPopup();\r\n      }\r\n    });\r\n\r\n    markers.clearLayers(); // Remove old markers\r\n\r\n    aircrafts.forEach((aircraft) => {\r\n      if (aircraft.last_coordinate) {\r\n        try {\r\n          let locationData = JSON.parse(aircraft.last_coordinate);\r\n          if (locationData.geometry && locationData.geometry.type === \"Point\") {\r\n            let coords = locationData.geometry.coordinates;\r\n            let lat = Number(coords[1]).toFixed(7);\r\n            let lng = Number(coords[0]).toFixed(7);\r\n            let alt = Number(locationData.properties.altitude).toFixed(0);\r\n\r\n            let marker = L.marker([lat, lng]).bindPopup(\r\n              `\r\n            <b>Aircraft:</b> <a href=\"/app/aircraft/${aircraft.name}\">${\r\n                aircraft.aircraft_name\r\n              }</a><br>\r\n            <b>User:</b> <a href=\"/app/user/${aircraft.aircraft_owner}\">${\r\n                aircraft.aircraft_owner_name || aircraft.aircraft_owner\r\n              }</a><br>\r\n            <b>Coordinates:</b> Longitude: ${lng} Latitude: ${lat}<br>\r\n            <b>Altitude:</b> ${alt}<br>\r\n            `,\r\n              {\r\n                autoClose: false,\r\n                closeOnClick: false,\r\n              }\r\n            );\r\n\r\n            markers.addLayer(marker);\r\n          }\r\n        } catch (error) {\r\n          console.error(\r\n            \"Invalid location data for flight:\",\r\n            aircraft.name,\r\n            error\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    map.addLayer(markers);\r\n\r\n    let bounds = markers.getBounds();\r\n    if (bounds.isValid()) {\r\n      // Only fit bounds on the first render\r\n      if (firstRender) {\r\n        map.fitBounds(bounds); // Fit bounds on the first render\r\n        firstRender = false; // After the first render, don't reset\r\n      }\r\n    }\r\n\r\n    // Restore the previous zoom level and center position if available\r\n    if (lastZoom !== null && lastCenter !== null) {\r\n      map.setView(lastCenter, lastZoom);\r\n    }\r\n\r\n    // Reopen the popup if it was open before\r\n    if (openPopup) {\r\n      openPopup.openOn(map);\r\n    }\r\n  }\r\n\r\n  function fetchAircrafts() {\r\n    frappe.call({\r\n      method: \"frappe.client.get_list\",\r\n      args: {\r\n        doctype: \"Aircraft\",\r\n        fields: [\"name\", \"aircraft_name\", \"last_coordinate\", \"aircraft_owner\"],\r\n        filters: [[\"is_active\", \"=\", 1]],\r\n        order_by: \"modified desc\",\r\n        limit_page_length: 100,\r\n      },\r\n      callback: function (response) {\r\n        if (response.message) {\r\n          let aircrafts = response.message;\r\n\r\n          let ownerEmails = [\r\n            ...new Set(aircrafts.map((a) => a.aircraft_owner)),\r\n          ];\r\n\r\n          frappe.call({\r\n            method: \"frappe.client.get_list\",\r\n            args: {\r\n              doctype: \"User\",\r\n              fields: [\"name\", \"full_name\"],\r\n              filters: [[\"name\", \"in\", ownerEmails]],\r\n            },\r\n            callback: function (userRes) {\r\n              if (userRes.message) {\r\n                let userMap = {};\r\n                userRes.message.forEach((user) => {\r\n                  userMap[user.name] = user.full_name;\r\n                });\r\n\r\n                aircrafts.forEach((a) => {\r\n                  a.aircraft_owner_name =\r\n                    userMap[a.aircraft_owner] || a.aircraft_owner;\r\n                });\r\n\r\n                updateMarkers(aircrafts);\r\n              }\r\n            },\r\n          });\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  fetchAircrafts(); // Initial fetch\r\n  setInterval(fetchAircrafts, 2000); // Fetch every 5 seconds\r\n}\r\n\r\nfrappe.require(\r\n  [\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/1.5.3/leaflet.markercluster.js\",\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/1.5.3/MarkerCluster.css\",\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/1.5.3/MarkerCluster.Default.css\",\r\n  ],\r\n  function () {\r\n    frappe.call({\r\n      method: \"frappe.client.get_list\",\r\n      args: {\r\n        doctype: \"Aircraft\",\r\n        fields: [\"name\", \"aircraft_name\", \"last_coordinate\", \"aircraft_owner\"],\r\n        filters: [[\"is_active\", \"=\", 1]],\r\n        order_by: \"modified desc\",\r\n        limit_page_length: 100,\r\n      },\r\n      callback: function (response) {\r\n        if (response.message) {\r\n          renderMap(response.message);\r\n        }\r\n      },\r\n    });\r\n  }\r\n);\r\n",
  "style": "#aircraft-locations-map {\n    width: 100%;\n    height: 600px;\n    z-index: 0;\n}\n\n.cluster_icon {\n    background-color: rgba(0, 123, 255, 0.8); \n    color: white; \n    border-radius: 50%; \n    width: 40px; \n    height: 40px; \n    display: flex; \n    align-items: center; \n    justify-content: center; \n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n}"
 }
]